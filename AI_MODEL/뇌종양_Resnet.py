# -*- coding: utf-8 -*-
"""뇌종양.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fqOMh58TB2Ick5rzYi5-SvAnHxVHdgD5
"""

from pathlib import Path
import pandas as pd

dir_ = Path('C:/Users/sbrrd/Desktop/Data')
filepaths = list(dir_.glob(r'**/*.jpg'))

def proc_img(filepath):
    labels = [str(filepath[i]).split("\\")[-2]
              for i in range(len(filepath))]

    filepath = pd.Series(filepath, name='Filepath').astype(str)
    labels = pd.Series(labels, name='Label')

    df = pd.concat([filepath, labels], axis=1)

    df = df.sample(frac=1,random_state=0).reset_index(drop = True)

    return df

df = proc_img(filepaths)
df.head(5)

print(f'Number of pictures: {df.shape[0]}\n')
print(f'Number of different labels: {len(df.Label.unique())}\n')
print(f'Labels: {df.Label.unique()}')

import matplotlib.pyplot as plt
fig, axes = plt.subplots(nrows=4, ncols=10, figsize=(11, 6),
                        subplot_kw={'xticks': [], 'yticks': []})

for i, ax in enumerate(axes.flat):
    ax.imshow(plt.imread(df.Filepath[i]))
    ax.set_title(df.Label[i], fontsize = 9)
plt.tight_layout(pad=0.5)
plt.show()

#glimoa_tumoe 악성 뇌교종
#meninigioma_tumot 뇌수막염
#pituitary tumor  뇌하수체 종양

def create_gen():
    # 생성기 및 데이터 증강으로 이미지 로드
    train_generator = tf.keras.preprocessing.image.ImageDataGenerator(
        preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,
        validation_split=0.2
    )
    train_images = train_generator.flow_from_dataframe(
         dataframe=df,
        x_col='Filepath',
        y_col='Label',
        class_mode='categorical',
        batch_size=32,
        shuffle=True,
        seed=0,
        subset='training',
        fill_mode="nearest"
    )

    val_images = train_generator.flow_from_dataframe(
        dataframe=df,
        x_col='Filepath',
        y_col='Label',
        class_mode='categorical',
        batch_size=32,
        shuffle=True,
        seed=0,
        subset='validation',
        fill_mode="nearest"
    )

    return train_generator,train_images,val_images

import tensorflow as tf
def get_model(model):

    kwargs =    {'input_shape':(224, 224, 3),
                'include_top':False,
                'weights':'imagenet',
                'pooling':'avg'}

    pretrained_model = model(**kwargs)
    pretrained_model.trainable = False

    inputs = pretrained_model.input

    x = tf.keras.layers.Dense(512, activation='relu')(pretrained_model.output)
    x = tf.keras.layers.Dropout(0.5)(x)
    outputs = tf.keras.layers.Dense(4, activation='softmax')(x)
    model = tf.keras.Model(inputs=inputs, outputs=outputs)

    model.compile(
        optimizer='adam',
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )

    return model

train_generator,train_images,val_images = create_gen()

callbacks = [tf.keras.callbacks.EarlyStopping(monitor='val_loss',patience=3)]

model = get_model(tf.keras.applications.ResNet50V2)
with tf.device('/device:GPU:0'):
    history = model.fit(train_images,validation_data=val_images,epochs=30,callbacks=callbacks)

import pandas as pd
import matplotlib.pyplot as plt
pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()
plt.title("Accuracy")
plt.show()

pd.DataFrame(history.history)[['loss','val_loss']].plot()
plt.title("Loss")
plt.show()